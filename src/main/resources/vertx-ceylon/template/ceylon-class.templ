@includeNamed{'/vertx-java/template/common-lib.templ'}
@code{

  /*
   * Returns the Ruby class qualified name for a given Vert.x Api interface
   * (for instance io.vertx.core.Vertx -> Vertx::Vertx), the generated name uses the module name the
   * Api interface belongs to.
   * @param type the type
   */
  def genRubyClassFqn(type) {
    return "::" + type.module.getName(CASE_CAMEL) + "::" + type.simpleName;
  }

  def genRubyDocType(type) {

    var kind = type.kind;
    if (kind == CLASS_OBJECT) {
      return "Object";
    } else if (kind == CLASS_JSON_OBJECT) {
      return "Hash{String => Object}";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "Array<String,Object>";
    } else if (kind == CLASS_ASYNC_RESULT) {
      return "AsyncResult"; /* Find something better than that... */
    } else if (kind == CLASS_HANDLER) {
      return "Proc";
    } else if (kind.collection) {
      if (kind == CLASS_LIST) {
        return "Array<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_SET) {
        return "Set<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_MAP) {
        return "Hash{" + genRubyDocType(type.args[0]) + " => " + genRubyDocType(type.args[1]) + "}";
      }
    } else if (kind == CLASS_DATA_OBJECT) {
      return "Hash"; /* can we do something better ? */
    } else if (kind == CLASS_ENUM) {
      var buffer = "";
      boolean index = 0;
      for (value : type.values) {
        if (index > 0) {
          buffer += ",";
        }
        buffer += ":" + value;
        index = index + 1;
      }
      return buffer;
    } else if (kind.basic) {
      if (kind == CLASS_STRING) {
        return "String";
      } else {
        var typeName = type.name;
        if (typeName == "byte" || typeName == "java.lang.Byte" ||
            typeName == "short" || typeName == "java.lang.Short" ||
            typeName == "int" || typeName == "java.lang.Integer" ||
            typeName == "char" || typeName == "java.lang.Character" ||
            typeName == "long" || typeName == "java.lang.Long") {
          return "Fixnum";
        }
        if (typeName == "float" || typeName == "java.lang.Float" ||
            typeName == "double" || typeName == "java.lang.Double") {
          return "Float";
        }
        if (typeName == "boolean" || typeName == "java.lang.Boolean") {
          return "true,false";
        }
      }
    } else if (kind == CLASS_API) {
      return genRubyClassFqn(type.raw);
    }
    System.out.println("Untranslated type " + type + " with kind " + kind);
    return "Nil";
  }

  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    var label = link.label.trim();
    if (rawType.module != null) {
      var elt = link.targetElement;
      var rubyType = genRubyDocType(rawType);
      var kind = elt.getKind().name();
      if (kind == "CLASS" || kind == "INTERFACE") {
        return "{" + rubyType + label + "}";
      } else if (kind == "METHOD") {
        return "{" + rubyType + "#" + CASE_SNAKE.format(CASE_CAMEL.parse(elt.getSimpleName().toString())) + (label.length() > 0 ? " " : "") + label + "}";
      } else {
        System.out.println("Unhandled kind " + kind + " for " + link.targetType);
      }
    } else {
      if (label != null) {
        return label;
      } else {
        return genRubyDocType(link.targetType);
      }
    }
  }

  /*
   * Returns the Ruby class qualified name for the Java type suitable for creating instances of the type
   * (for instance java.util.HashMap -> Java::JavaUtil::HashMap), the generated name uses the package name
   * of the type.
   * @param type the type
   */
  def genJavaClassFqn(type) {
    var kind = type.getKind();
    if (kind == CLASS_PRIMITIVE) {
      return "Java::" + type.simpleName;
    } else if (kind == CLASS_STRING) {
      return "Java::java.lang.String";
    } else if (kind == CLASS_HANDLER) {
      return "Java::IoVertxCore::Handler";
    } else if (kind == CLASS_OBJECT) {
      return "Java::java.lang.Object";
    } else {
      type = type.raw;
      return  "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.packageName)) + "::" + type.simpleName;
    }
  }

  /* Ruby reserved words */
  var reservedWords = new java.util.HashSet();
  reservedWords.add("alias");
  reservedWords.add("and");
  reservedWords.add("BEGIN");
  reservedWords.add("begin");
  reservedWords.add("def");
  reservedWords.add("elsif");
  reservedWords.add("END");
  reservedWords.add("end");
  reservedWords.add("ensure");
  reservedWords.add("in");
  reservedWords.add("module");
  reservedWords.add("next");
  reservedWords.add("nil");
  reservedWords.add("not");
  reservedWords.add("or");
  reservedWords.add("redo");
  reservedWords.add("rescue");
  reservedWords.add("retry");
  reservedWords.add("self");
  reservedWords.add("then");
  reservedWords.add("undef");
  reservedWords.add("unless");
  reservedWords.add("until");
  reservedWords.add("when");
  reservedWords.add("yield");

  /*
   * Generate a correct ruby name that does not clash with an identifier.
   */
  def genRubyName(name) {
    if (reservedWords.contains(name)) {
      return "_" + name
    } else {
      return name;
    }
  }

  /*
   * Generate a ruby method name for a given method.
   */
  def genMethodName(method) {
    return toCeylonIdentifier(method.name);
  }

  /*
   * Returns the predicate for the specified type and expression that validates a Ruby object can be converted
   * to a specified Java object.
   * @param expr the expression that evaluates to the object to validate
   * @param type the type to validate
   */
  def genTypeCheckPredicate(expr, type) {
    var kind = type.kind;
    if (kind == CLASS_STRING) {
      return expr + ".class == String";
    } else if (kind == CLASS_ENUM) {
      return expr + ".class == Symbol";
    } else if (kind.basic) {
      var typeName = type.name;
      if (typeName == "byte" || typeName == "java.lang.Byte" ||
          typeName == "short" || typeName == "java.lang.Short" ||
          typeName == "int" || typeName == "java.lang.Integer" ||
          typeName == "char" || typeName == "java.lang.Character" ||
          typeName == "long" || typeName == "java.lang.Long") {
        return expr + ".class == Fixnum";
      }
      if (typeName == "float" || typeName == "java.lang.Float" ||
          typeName == "double" || typeName == "java.lang.Double") {
        return expr + ".class == Float";
      }
      if (typeName == "boolean" || typeName == "java.lang.Boolean") {
        return "(" + expr + ".class == TrueClass || " + expr + ".class == FalseClass)";
      }
    } else if (kind == CLASS_OBJECT) {
      return "(" + expr + ".class == String  || " + expr + ".class == Hash || " + expr + ".class == Array || "
      + expr + ".class == NilClass || " + expr + ".class == TrueClass || " + expr + ".class == FalseClass || "
      + expr + ".class == Fixnum || " + expr + ".class == Float)";
    } else if (kind == CLASS_API) {
      return expr + ".class.method_defined?(:j_del)";
    } else if (kind == CLASS_HANDLER) {
      return expr + ".class == Proc";
    } else if (kind == CLASS_DATA_OBJECT || kind == CLASS_JSON_OBJECT) {
      return expr + ".class == Hash";
    } else if (kind == CLASS_JSON_ARRAY) {
      return expr + ".class == Array";
    } else if (kind == CLASS_LIST) {
      return expr + ".class == Array";
    } else if (kind == CLASS_SET) {
      return expr + ".class == Set";
    } else if (kind == CLASS_MAP) {
      return expr + ".class == Hash";
    }
    return "false";
  }

  /*
   * Returns the method call for a given method.
   * @param method the called method
   * @param params the parameter names to use
   */
  def genMethodCall(method,params) {
    var args = "(";
    var signature = "(:" + method.getName() + ", [";
    var index = 1;
    if (method.params.size() > 0) {
      for (param : method.params) {
        if (param != method.params[0]) {
          args += ",";
          signature += ",";
        }
        args += genConvParam(param.type, params[index - 1]);
        signature += genJavaClassFqn(param.type) + ".java_class";
        index += 1;
      }
    }
    args += ")";
    signature += "])";
    /*
    return "(Java::IoVertxLangRuby::Helper.fixJavaMethod(" + (method.staticMethod ? genJavaClassFqn(type) : "@j_del") +
       ".java_class.declared_method" + signature +
       ")).invoke" + args;
    */
    return (method.staticMethod ? genJavaClassFqn(type) : "@j_del") + ".java_method" + signature + ".call" + args;
  }

  /*
   * Returns the Ruby expression that converts a Ruby object to a Java object given that
   * the expression is valid.
   * @param type the Java type to convert to
   * @param expr the expression that evaluates to the Ruby object
   */
  def genConvParam(type, expr) {
    var kind = type.kind;
    if (kind.basic) {
      if (type.name == "byte" || type.name == "java.lang.Byte") {
        return "::Vertx::Util::Utils.to_byte(" + expr + ")";
      } else if (type.name == "short" || type.name == "java.lang.Short") {
        return "::Vertx::Util::Utils.to_short(" + expr + ")";
      } else if (type.name == "integer" || type.name == "java.lang.Integer") {
        return "::Vertx::Util::Utils.to_integer(" + expr + ")";
      } else if (type.name == "float" || type.name == "java.lang.Float") {
        /* not tested */
        return "::Vertx::Util::Utils.to_float(" + expr + ")";
      } else if (type.name == "double" || type.name == "java.lang.Double") {
        /* not tested */
        return "::Vertx::Util::Utils.to_double(" + expr + ")";
      } else {
        return expr;
      }
    } else if (kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      if (eventKind.basic || eventKind == CLASS_DATA_OBJECT || eventKind.collection || eventKind == CLASS_API ||
          eventKind == CLASS_THROWABLE || eventKind == CLASS_OBJECT || eventKind.json) {
        if (expr != "yield") {
          expr += ".call";
        }
        return "(Proc.new { |event| " + expr + "(" + genConvReturn(eventType, "event") + ") })";
      } else if (eventKind == CLASS_VOID) {
        if (expr == "yield") {
          expr = "Proc.new { yield }";
        }
        return expr;
      } else if (eventKind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        var resultKind = resultType.kind;
        if (resultKind.basic || resultKind == CLASS_DATA_OBJECT || resultKind.collection || resultKind == CLASS_API ||
            resultKind == CLASS_OBJECT || resultKind.json) {
          if (expr != "yield") {
            expr += ".call";
          }
          return "(Proc.new { |ar| " + expr + "(ar.failed ? ar.cause : nil, ar.succeeded ? " + genConvReturn(resultType, "ar.result") + " : nil) })";
        } else if (resultKind == CLASS_VOID) {
          if (expr != "yield") {
            expr += ".call";
          }
          return "(Proc.new { |ar| " + expr + "(ar.failed ? ar.cause : nil) })";
        }
      }
    } else if (kind == CLASS_API) {
      return expr + ".j_del";
    } else if (kind == CLASS_OBJECT) {
      return "::Vertx::Util::Utils.to_object(" + expr + ")";
    } else if (kind == CLASS_DATA_OBJECT) {
      return genJavaClassFqn(type) + ".new(::Vertx::Util::Utils.to_json_object(" + expr + "))";
    } else if (kind == CLASS_JSON_OBJECT) {
      return "::Vertx::Util::Utils.to_json_object(" + expr + ")";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "::Vertx::Util::Utils.to_json_array(" + expr + ")";
    } else if (kind == CLASS_ENUM) {
      return genJavaClassFqn(type) + ".valueOf(" + expr + ")";
    } else if (kind == CLASS_LIST) {
      var elementType = type.args[0];
      return expr + ".map { |element| " + genConvParam(elementType, "element") + " }";
    } else if (kind == CLASS_SET) {
      var elementType = type.args[0];
      return "Java::JavaUtil::LinkedHashSet.new(" + expr + ".map { |element| " + genConvParam(elementType, "element") + " })";
    } else if (kind == CLASS_MAP) {
      var valueType = type.args[1];
      return "Hash[" + expr + ".map { |k,v| [k," + genConvParam(valueType, "v") + "] }]";
    }
    return "nil";
  }

  /*
   * Returns the Ruby expression that converts a Java object to a Ruby object.
   * @param type the type of the Java object
   * @param expr the expression that evaluates to the Java object
   */
  def genConvReturn(type, expr) {
    if (type.name.equals("void")) {
      return expr;
    } else {
      var kind = type.kind;
      if (kind.basic || kind == CLASS_THROWABLE) {
        return expr;
      } else if (kind == CLASS_DATA_OBJECT) {
        return expr + " != nil ? JSON.parse(" + expr + ".toJson.encode) : nil";
      } else if (kind == CLASS_LIST) {
        var elementType = type.args[0];
        return expr + ".to_a.map { |elt| " + genConvReturn(elementType, "elt") + " }";
      } else if (kind == CLASS_SET) {
        var elementType = type.args[0];
        return "::Vertx::Util::Utils.to_set(" + expr + ").map! { |elt| " + genConvReturn(elementType, "elt") + " }";
      } else if (kind == CLASS_MAP) {
        var valueType = type.args[1];
        var valueKind = valueType.kind;
        var toJava = "to_object";
        if (valueKind == CLASS_JSON_OBJECT) {
          toJava = "to_json_object";
        } else if (valueKind == CLASS_JSON_ARRAY) {
          toJava = "to_json_array";
        } else if (valueKind.basic) {
          if (valueKind == CLASS_STRING) {
            toJava = "to_string";
          } else if (valueType.name == 'java.lang.Long') {
            toJava = "to_long";
          } else if (valueType.name == 'java.lang.Integer') {
            toJava = "to_integer";
          } else if (valueType.name == 'java.lang.Short') {
            toJava = "to_short";
          } else if (valueType.name == 'java.lang.Byte') {
            toJava = "to_byte";
          } else if (valueType.name == 'java.lang.Character') {
            toJava = "to_character";
          } else if (valueType.name == 'java.lang.Boolean') {
            toJava = "to_boolean";
          } else if (valueType.name == 'java.lang.Float') {
            toJava = "to_float";
          } else if (valueType.name == 'java.lang.Double') {
            toJava = "to_double";
          }
        }
        return "Java::IoVertxLangRuby::Helper.adaptingMap(" + expr + ", Proc.new { |val| ::Vertx::Util::Utils.from_object(val) }, Proc.new { |val| ::Vertx::Util::Utils." + toJava + "(val) })";
      } else if (kind == CLASS_API) {
        return "::Vertx::Util::Utils.safe_create(" + expr + "," + genRubyClassFqn(type.raw) + (type.raw.concrete ? "" : "Impl") + ")";
      } else if (kind.json) {
        return expr + " != nil ? JSON.parse(" + expr + ".encode) : nil";
      } else if (kind == CLASS_OBJECT) {
        return "::Vertx::Util::Utils.from_object(" + expr + ")";
      } else if (kind == CLASS_ENUM) {
        return expr + ".name.intern";
      }
      return "nil";
    }
  }

  /*
   * Append an entry to a Trie structure. The Trie structure is created from the overloaded methods parameters
   * and is used to know if we need to name the method parameters in a generic fashion or not.
   *
   * for example:
   * - Buffer buffer()
   * - Buffer buffer(int initialSizeHint)
   * - Buffer buffer(String string))
   * - Buffer buffer(String string, String enc)
   *
   * gives {int:{},String:{String)} that generates the Ruby code
   *
   * def self.buffer(param_1=nil,param_2=nil)
   *   if param_1.class == String
   *     if param_2.class == String
   *       return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1,param_2))
   *     end
   *     return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1))
   *   end
   *   if param_1.class == Fixnum
   *     return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1))
   *   end
   *   return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer)
   * end
   *
   * note: last param handlers are willingly not used in the trie as they are handled using `yield` and
   *       not as a method param.
   *
   * @param trie the trie as a Map<ParamInfo, Map<ParamInfo, Map<...>>>
   * @param entry the entry as an Iterator<ParamInfo>
   */
  def trieAppend(trie, params) {
    if (params.hasNext()) {
      var first = params.next();
      if (first.type.kind == CLASS_HANDLER && !params.hasNext()) {
        return true;
      }
      if (!trie.containsKey(first.type)) {
        trie.put(first.type, new java.util.HashMap());
      }
      return trieAppend(trie.get(first.type), params);
    } else {
      return trie;
    }
  }
  /*
   * Returns the trie kind:
   * 0 : empty
   * 1 : linear
   * 2 : multiarg
   * @param trie the trie
   */
  def trieKind(trie) {
    if (trie.isEmpty()) {
      return 0;
    } else if (trie.size() == 1) {
      var kind = trieKind(trie.get(trie.keySet().iterator().next()));
      if (kind == 2) {
        return 2;
      }
      return 1;
    } else {
      return 2;
    }
  }

  /*
   * Returns the trie height
   * @param trie the trie
   */
  def trieHeight(trie) {
    if (trie.isEmpty()) {
      return 0;
    } else {
      var max = 0;
      for (child : trie.values()) {
        var height = trieHeight(child) + 1;
        if (height > max) {
          max = height;
        }
      }
      return max;
    }
  }

  /*
   * Returns the code for indenting properly, given the actual _trie stack size.
   */
  def genIndent() {
    var builder = new java.lang.StringBuilder('  ');
    for (i:_trie.size()) {
      builder.append('  ');
    }
    return builder.toString();
  }
}

@comment{"Generate the imports"}
@includeNamed{'ceylon-imports.templ'}

@declare{'initializer'}
    # @private\n
    # @param j_del [@{genRubyClassFqn(type.raw)}] the java delegate\n
    def initialize(j_del)\n
	@if{callSuper}
      super(j_del)\n
	@end{}
      @j_del = j_del\n
    end\n
    # @private\n
    # @return [@{genRubyClassFqn(type.raw)}] the underlying java delegate\n
    def j_del\n
      @j_del\n
    end\n
@end{}






@code{
  def genTypeDecl(type) {
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    if (type instanceof io.vertx.codegen.TypeInfo$Class) {
      var kind = type.kind;
      if (kind == CLASS_API) {
        decl = type.simpleName;
      } else if (kind == CLASS_BOXED_PRIMITIVE) {
        var name = type.name;
        if (name == 'java.lang.Long' || name == 'java.lang.Integer') {
          decl = 'Integer';
        }
      }
    } else if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
      decl = genTypeDecl(type.raw);
      var sep = '<';
      for (typeArg : type.args) {
        decl += sep + genTypeDecl(typeArg);
        sep = ',';
      }
      decl += '>';
    } else if (type instanceof io.vertx.codegen.TypeInfo$Variable) {
      decl = type.name;
    }
    return decl;
  }

  def toCeylonIdentifier(s) {
    if (s == 'value') {
      return '\\ivalue';
    } else if (s == 'exists') {
       return '\\iexists';
    } else {
      return s;
    }
  }

  def shouldDeclareMethod(methods) {
    for (method : methods) {
      if (method.ownerTypes.size() > 1 || method.isOwnedBy(type.raw)) {
        return true;
      }
    }
    return false;
  }

  def isActualMethod(methods) {
    for (method : methods) {
      if (method.ownerTypes.size() > 1) {
        return true;
      }
    }
    return false;
  }
}

@declare{'genModelDecl'}
	@{type.raw.simpleName}
	@if{typeParams.size() > 0}
		<@foreach{typeParam:typeParams}
		@{typeParam.name}
		@end{','}>
	@end{}
@end{}

@declare{'genExtendsClause'}
	@if{concreteSuperTypes.size() > 0}extends @{genTypeDecl(concreteSuperTypes[0])} @end{}
@end{}

@declare{'genSatisfiesClause'}
	@if{abstractSuperTypes.size() > 0}satisfies @foreach{superType:abstractSuperTypes}
	@{genTypeDecl(superType)}
	@end{' & '} @end{}
@end{}

/* Generated from @{type.name} */\n
@if{concrete}
shared class @includeNamed{'genModelDecl'}() @includeNamed{'genExtendsClause'}@includeNamed{'genSatisfiesClause'}{\n
@else{}
shared interface @includeNamed{'genModelDecl'} @includeNamed{'genSatisfiesClause'}{\n
@end{}

	@foreach{methods:methodsByName.values()}
		@code{method=methods[methods.size()-1]}
		@code{methodName=genMethodName(methods[0])}
		@if{!method.staticMethod && shouldDeclareMethod(methods)}
			  shared @if{isActualMethod(methods)}actual @end{}default void @{methodName}() {\n
			  }\n
		@end{}
	@end{}


}\n

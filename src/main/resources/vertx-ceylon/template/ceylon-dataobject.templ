@includeNamed{'ceylon-common.templ'}
@includeNamed{'ceylon-imports.templ'}

@code{
  def genTypeDecl(type) {
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = type.simpleName;
      if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
        decl = genTypeDecl(type.raw);
        var sep = '<';
        for (typeArg : type.args) {
          decl += sep + genTypeDecl(typeArg);
          sep = ',';
        }
        decl += '>';
      }
    } else if (kind == CLASS_STRING || kind == CLASS_ENUM) {
      decl = 'String';
    } else if (kind == CLASS_BOXED_PRIMITIVE) {
      var name = type.name;
      if (name == 'java.lang.Long' || name == 'java.lang.Integer' || name == 'java.lang.Short') {
        decl = 'Integer';
      } else if (name == 'java.lang.Float' || name == 'java.lang.Double') {
        decl = 'Float';
      } else if (name == 'java.lang.Boolean') {
        decl = 'Boolean';
      } else if (name == 'java.lang.Character') {
        decl = 'Character';
      } else if (name == 'java.lang.Byte') {
        decl = 'Byte';
      }
    } else if (kind == CLASS_PRIMITIVE) {
      var name = type.name;
      if (name == 'long' || name == 'int' || name == 'short') {
        decl = 'Integer';
      } else if (name == 'float' || name == 'double') {
        decl = 'Float';
      } else if (name == 'boolean') {
        decl = 'Boolean';
      } else if (name == 'char') {
        decl = 'Character';
      } else if (name == 'byte') {
        decl = 'Byte';
      }
    } else if (kind == CLASS_OBJECT) {
      /* handle this instanceof better */
      if (type instanceof io.vertx.codegen.TypeInfo$Variable) {
        if (type.param instanceof io.vertx.codegen.TypeParamInfo$Class) {
          decl = type.name;
        } else {
          decl = 'Object';
        }
      } else {
        decl = 'Object';
      }
    } else if (kind == CLASS_HANDLER) {
      var arg = type.args[0];
      if (arg.kind == CLASS_VOID) {
        decl = 'Anything()';
      } else if (arg.kind == CLASS_ASYNC_RESULT) {
        var result = arg.args[0];
        if (result.kind == CLASS_VOID) {
          decl = 'Anything(Throwable?)';
        } else {
          decl = 'Anything(Throwable|' + genTypeDecl(result) + ')';
        }
      } else {
        decl = 'Anything(' + genTypeDecl(type.args[0]) + ')';
      }
    } else if (kind == CLASS_THROWABLE) {
      decl = 'Throwable';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = type.simpleName;
    } else if (kind == CLASS_LIST) {
      decl = 'List<' + genTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_VOID) {
      decl = 'Anything';
    } else if (kind == CLASS_SET) {
      decl = 'Set<' + genTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_LIST) {
      decl = 'List<' + genTypeDecl(type.args[0])) + '>';
    } else if (kind == CLASS_MAP) {
      decl = 'Map<' + genTypeDecl(type.args[0]) + ',' + genTypeDecl(type.args[1]) + '>';
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = 'JsonObject';
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = 'JsonArray';
    } else if (kind == CLASS_OTHER) {
      if (type instanceof io.vertx.codegen.TypeInfo$Void) {
        decl = 'Anything';
      }
    }
    return decl;
  }
}

@code{
  addClassImport("io.vertx.core.json", "JsonObject", "JsonObject_");
  addClassImport("ceylon.json", "Object", "JsonObject");
  addClassImport("ceylon.json", "parse", "parse");
  addClassImport("io.vertx.lang.ceylon", "BaseDataObject", "BaseDataObject");
  addClassImport("io.vertx.lang.ceylon", "Converter", "Converter");
  addClassImport("io.vertx.lang.ceylon", "ToJava", "ToJava");

  props=new java.util.ArrayList();
  for (prop : properties) {
    var propType = prop.type;
    var propKind = propType.kind;
    if (propKind.basic || propKind.json || propKind == CLASS_DATA_OBJECT) {
      props.add(prop);
    }
    if (propKind == CLASS_DATA_OBJECT) {
      addClassImport(propType.translatePackageName('ceylon'), propType.simpleName, propType.simpleName);
      if (jsonifiable) {
        addClassImport(propType.translatePackageName('ceylon'), "to" + propType.simpleName, "to" + propType.simpleName);
      }
    }
  }
  if (superType != null) {
    addClassImport(superType.translatePackageName('ceylon'), superType.simpleName, superType.simpleName);
  }
  addClassImport(type.packageName, type.simpleName, type.simpleName + "_");
}

@comment{"Generate the imports"}
@includeNamed{'genImports'}

/* Generated from @{type.name} */\n
shared @if{isClass}class@else{}interface@end{} @{type.raw.simpleName}@if{isClass}(
	@foreach{prop:props}
\n  @if{prop.declared}shared @end{}@{genTypeDecl(prop.type)}? @{toCeylonIdentifier(prop.name)} = null
	@end{','})@if{superType != null} extends @{superType.simpleName}(
	@code{var prev = '\n'}
	@foreach{prop:props}
	@if{!prop.declared}
	@{prev}  @{toCeylonIdentifier(prop.name)}
	@code{prev = ',\n'}
	@end{}
	@end{})@end{}@end{}@if{abstractSuperTypes.size() > 0} satisfies\n
	@foreach{abstractSuperType : abstractSuperTypes}
  @{abstractSuperType.simpleName}
	@end{' &\n'}
@end{} @if{abstractSuperTypes.empty}satisfies@else{}&@end{} BaseDataObject {\n
  shared actual default JsonObject toJson() {\n
    value json = JsonObject();\n
@foreach{prop:props}
	@if{prop.declared}
		@code{propName=toCeylonIdentifier(prop.name)}
		@code{propType=prop.type}
    if (exists @{propName}) {\n
		@if{propType.kind.basic || propType.kind.json}
      json.put("@{prop.name}", @{propName});\n
		@else{propType.kind == CLASS_DATA_OBJECT}
      json.put("@{prop.name}", @{propName}.toJson());\n
		@end{}
    }\n
	@end{}
@end{}
    return json;\n
  }\n
}\n

@if{isClass && jsonifiable}
\n
shared object toCeylon@{type.raw.simpleName} extends Converter<@{type.raw.simpleName}_, @{type.raw.simpleName}>() {\n
  shared actual @{type.raw.simpleName} convert(@{type.raw.simpleName}_ src) {\n
    value json = parse(src.toJson().string);\n
    assert(is JsonObject json);\n
	@foreach{prop:props}
		@code{propName=toCeylonIdentifier(prop.name)}
		@code{propType=prop.type}
		@if{propType.name == 'java.lang.String'}
    String? @{propName} = json.getStringOrNull("@{prop.name}");\n
		@else{propType.name == 'java.lang.Short' || propType.name == 'java.lang.Integer' || propType.name == 'java.lang.Long' || propType.name == 'short' || propType.name == 'int' || propType.name == 'long'}
    Integer? @{propName} = json.getIntegerOrNull("@{prop.name}");\n
		@else{propType.name == 'java.lang.Boolean' || propType.name == 'boolean'}
    Boolean? @{propName} = json.getBooleanOrNull("@{prop.name}");\n
		@else{propType.name == 'java.lang.Float' || propType.name == 'java.lang.Double' || propType.name == 'float' || propType.name == 'double'}
    Float? @{propName} = json.getFloatOrNull("@{prop.name}");\n
		@else{propType.name == 'io.vertx.core.json.JsonObject'}
    JsonObject? @{propName} = json.getObjectOrNull("@{prop.name}");\n
		@else{propType.name == 'io.vertx.core.json.JsonArray'}
    JsonArray? @{propName} = json.getArrayOrNull("@{prop.name}");\n
		@else{propType.kind == CLASS_DATA_OBJECT}
    @{prop.type.simpleName}? @{propName};\n
    if (exists tmp = json.getObjectOrNull("@{prop.name}")) {\n
      @{propName} = to@{prop.type.simpleName}(tmp);\n
    } else {\n
      @{propName} = null;\n
    }\n
		@else{}
    /* @{propType} not handled */\n
		@end{}
	@end{}
    return @{type.raw.simpleName} {\n
	@foreach{prop:props}
		@code{propName=toCeylonIdentifier(prop.name)}
      @{propName} = @{propName};\n
	@end{}
    };\n
  }\n
}\n
@end{}

@if{isClass && concrete}
\n
shared object toJava@{type.raw.simpleName} extends Converter<@{type.raw.simpleName}, @{type.raw.simpleName}_>() {\n
  shared actual @{type.raw.simpleName}_ convert(@{type.raw.simpleName} src) {\n
    // Todo : make optimized version without json\n
    value json = JsonObject_(src.toJson().string);\n
    value ret = @{type.raw.simpleName}_(json);\n
    return ret;\n
  }\n
}\n
@end{}
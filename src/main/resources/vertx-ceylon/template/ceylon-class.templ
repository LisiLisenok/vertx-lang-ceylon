@includeNamed{'/vertx-java/template/common-lib.templ'}
@includeNamed{'ceylon-common.templ'}
@code{

  /*
   * Returns the Ruby class qualified name for a given Vert.x Api interface
   * (for instance io.vertx.core.Vertx -> Vertx::Vertx), the generated name uses the module name the
   * Api interface belongs to.
   * @param type the type
   */
  def genRubyClassFqn(type) {
    return "::" + type.module.getName(CASE_CAMEL) + "::" + type.simpleName;
  }

  def genRubyDocType(type) {

    var kind = type.kind;
    if (kind == CLASS_OBJECT) {
      return "Object";
    } else if (kind == CLASS_JSON_OBJECT) {
      return "Hash{String => Object}";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "Array<String,Object>";
    } else if (kind == CLASS_ASYNC_RESULT) {
      return "AsyncResult"; /* Find something better than that... */
    } else if (kind == CLASS_HANDLER) {
      return "Proc";
    } else if (kind.collection) {
      if (kind == CLASS_LIST) {
        return "Array<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_SET) {
        return "Set<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_MAP) {
        return "Hash{" + genRubyDocType(type.args[0]) + " => " + genRubyDocType(type.args[1]) + "}";
      }
    } else if (kind == CLASS_DATA_OBJECT) {
      return "Hash"; /* can we do something better ? */
    } else if (kind == CLASS_ENUM) {
      var buffer = "";
      boolean index = 0;
      for (value : type.values) {
        if (index > 0) {
          buffer += ",";
        }
        buffer += ":" + value;
        index = index + 1;
      }
      return buffer;
    } else if (kind.basic) {
      if (kind == CLASS_STRING) {
        return "String";
      } else {
        var typeName = type.name;
        if (typeName == "byte" || typeName == "java.lang.Byte" ||
            typeName == "short" || typeName == "java.lang.Short" ||
            typeName == "int" || typeName == "java.lang.Integer" ||
            typeName == "char" || typeName == "java.lang.Character" ||
            typeName == "long" || typeName == "java.lang.Long") {
          return "Fixnum";
        }
        if (typeName == "float" || typeName == "java.lang.Float" ||
            typeName == "double" || typeName == "java.lang.Double") {
          return "Float";
        }
        if (typeName == "boolean" || typeName == "java.lang.Boolean") {
          return "true,false";
        }
      }
    } else if (kind == CLASS_API) {
      return genRubyClassFqn(type.raw);
    }
    System.out.println("Untranslated type " + type + " with kind " + kind);
    return "Nil";
  }

  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    var label = link.label.trim();
    if (rawType.module != null) {
      var elt = link.targetElement;
      var rubyType = genRubyDocType(rawType);
      var kind = elt.getKind().name();
      if (kind == "CLASS" || kind == "INTERFACE") {
        return "{" + rubyType + label + "}";
      } else if (kind == "METHOD") {
        return "{" + rubyType + "#" + CASE_SNAKE.format(CASE_CAMEL.parse(elt.getSimpleName().toString())) + (label.length() > 0 ? " " : "") + label + "}";
      } else {
        System.out.println("Unhandled kind " + kind + " for " + link.targetType);
      }
    } else {
      if (label != null) {
        return label;
      } else {
        return genRubyDocType(link.targetType);
      }
    }
  }

  /*
   * Returns the Ruby class qualified name for the Java type suitable for creating instances of the type
   * (for instance java.util.HashMap -> Java::JavaUtil::HashMap), the generated name uses the package name
   * of the type.
   * @param type the type
   */
  def genJavaClassFqn(type) {
    var kind = type.getKind();
    if (kind == CLASS_PRIMITIVE) {
      return "Java::" + type.simpleName;
    } else if (kind == CLASS_STRING) {
      return "Java::java.lang.String";
    } else if (kind == CLASS_HANDLER) {
      return "Java::IoVertxCore::Handler";
    } else if (kind == CLASS_OBJECT) {
      return "Java::java.lang.Object";
    } else {
      type = type.raw;
      return  "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.packageName)) + "::" + type.simpleName;
    }
  }

  /* Ruby reserved words */
  var reservedWords = new java.util.HashSet();
  reservedWords.add("alias");
  reservedWords.add("and");
  reservedWords.add("BEGIN");
  reservedWords.add("begin");
  reservedWords.add("def");
  reservedWords.add("elsif");
  reservedWords.add("END");
  reservedWords.add("end");
  reservedWords.add("ensure");
  reservedWords.add("in");
  reservedWords.add("module");
  reservedWords.add("next");
  reservedWords.add("nil");
  reservedWords.add("not");
  reservedWords.add("or");
  reservedWords.add("redo");
  reservedWords.add("rescue");
  reservedWords.add("retry");
  reservedWords.add("self");
  reservedWords.add("then");
  reservedWords.add("undef");
  reservedWords.add("unless");
  reservedWords.add("until");
  reservedWords.add("when");
  reservedWords.add("yield");

  /*
   * Generate a correct ruby name that does not clash with an identifier.
   */
  def genRubyName(name) {
    if (reservedWords.contains(name)) {
      return "_" + name
    } else {
      return name;
    }
  }

  /*
   * Generate a ruby method name for a given method.
   */
  def genMethodName(method) {
    return toCeylonIdentifier(method.name);
  }

  /*
   * Returns the predicate for the specified type and expression that validates a Ruby object can be converted
   * to a specified Java object.
   * @param expr the expression that evaluates to the object to validate
   * @param type the type to validate
   */
  def genTypeCheckPredicate(expr, type) {
    var kind = type.kind;
    if (kind == CLASS_STRING) {
      return expr + ".class == String";
    } else if (kind == CLASS_ENUM) {
      return expr + ".class == Symbol";
    } else if (kind.basic) {
      var typeName = type.name;
      if (typeName == "byte" || typeName == "java.lang.Byte" ||
          typeName == "short" || typeName == "java.lang.Short" ||
          typeName == "int" || typeName == "java.lang.Integer" ||
          typeName == "char" || typeName == "java.lang.Character" ||
          typeName == "long" || typeName == "java.lang.Long") {
        return expr + ".class == Fixnum";
      }
      if (typeName == "float" || typeName == "java.lang.Float" ||
          typeName == "double" || typeName == "java.lang.Double") {
        return expr + ".class == Float";
      }
      if (typeName == "boolean" || typeName == "java.lang.Boolean") {
        return "(" + expr + ".class == TrueClass || " + expr + ".class == FalseClass)";
      }
    } else if (kind == CLASS_OBJECT) {
      return "(" + expr + ".class == String  || " + expr + ".class == Hash || " + expr + ".class == Array || "
      + expr + ".class == NilClass || " + expr + ".class == TrueClass || " + expr + ".class == FalseClass || "
      + expr + ".class == Fixnum || " + expr + ".class == Float)";
    } else if (kind == CLASS_API) {
      return expr + ".class.method_defined?(:j_del)";
    } else if (kind == CLASS_HANDLER) {
      return expr + ".class == Proc";
    } else if (kind == CLASS_DATA_OBJECT || kind == CLASS_JSON_OBJECT) {
      return expr + ".class == Hash";
    } else if (kind == CLASS_JSON_ARRAY) {
      return expr + ".class == Array";
    } else if (kind == CLASS_LIST) {
      return expr + ".class == Array";
    } else if (kind == CLASS_SET) {
      return expr + ".class == Set";
    } else if (kind == CLASS_MAP) {
      return expr + ".class == Hash";
    }
    return "false";
  }

  /*
   * Returns the method call for a given method.
   * @param method the called method
   * @param params the parameter names to use
   */
  def old_genMethodCall(method,params) {
    var args = "(";
    var signature = "(:" + method.getName() + ", [";
    var index = 1;
    if (method.params.size() > 0) {
      for (param : method.params) {
        if (param != method.params[0]) {
          args += ",";
          signature += ",";
        }
        args += genConvParam(param.type, params[index - 1]);
        signature += genJavaClassFqn(param.type) + ".java_class";
        index += 1;
      }
    }
    args += ")";
    signature += "])";
    /*
    return "(Java::IoVertxLangRuby::Helper.fixJavaMethod(" + (method.staticMethod ? genJavaClassFqn(type) : "@j_del") +
       ".java_class.declared_method" + signature +
       ")).invoke" + args;
    */
    return (method.staticMethod ? genJavaClassFqn(type) : "@j_del") + ".java_method" + signature + ".call" + args;
  }

  /*
   * Returns the Ruby expression that converts a Ruby object to a Java object given that
   * the expression is valid.
   * @param type the Java type to convert to
   * @param expr the expression that evaluates to the Ruby object
   */
  def genConvParam(type, lhs, rhs) {
    var kind = type.kind;
    if (kind.basic) {
      var sname = type.simpleName;
      if (kind == CLASS_STRING) {
        return 'String ' + lhs + ' = ' + rhs;
      }
      if (kind == CLASS_BOXED_PRIMITIVE) {
        return sname + '_ ' + lhs + ' = nothing';
      }
      if (sname == 'short' || sname == 'int' || sname == 'long') {
        return 'Integer ' + lhs + ' = ' + rhs;
      }
      if (sname == 'boolean') {
        return 'Boolean ' + lhs + " = " + rhs;
      }
      if (sname == 'float' || sname == 'double') {
        return 'Float ' + lhs + ' = ' + rhs;
      }
      if (sname == 'char') {
        return 'Character ' + lhs + ' = ' + rhs;
      }
    } else if (kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      if (eventKind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        var resultKind = resultType.kind;
        return 'Handler_<AsyncResult_<' + genConvParamType(resultType) + '>> ' + lhs + ' = nothing';
      } else {
        return 'Handler_<' + genConvParamType(eventType) + '> ' + lhs + ' = nothing';
      }
    } else if (kind == CLASS_API) {
    } else if (kind == CLASS_OBJECT) {
      if (type.name == 'java.lang.Object') {
        return 'Object ' + lhs + ' = ' + rhs;
      } else {
        return 'assert(is Object ' + lhs + ' = ' + rhs + ')';
      }
    } else if (kind == CLASS_DATA_OBJECT) {
      return type.simpleName + '_ ' + lhs + ' = ' + type.simpleName + "_()";
    } else if (kind == CLASS_JSON_OBJECT) {
    } else if (kind == CLASS_JSON_ARRAY) {
    } else if (kind == CLASS_ENUM) {
      return type.simpleName + '_ ' + lhs + ' = nothing';
    } else if (kind == CLASS_LIST) {
    } else if (kind == CLASS_SET) {
    } else if (kind == CLASS_MAP) {
    }
    return 'Nothing ' + lhs + ' = nothing';
  }

  def genConvParamType(type) {
    var kind = type.kind;
    if (kind == CLASS_OBJECT) {
      return 'Object';
    }
    if (kind == CLASS_VOID) {
      return "Void_";
    }
    if (kind == CLASS_STRING) {
      return "String_";
    }
    if (kind.basic) {
      var name = type.simpleName;
      if (name == 'byte' || name == 'Byte') {
        return 'Byte_';
      }
      if (name == 'short' || name == 'Short') {
        return 'Short_';
      }
      if (name == 'Integer' || name == 'int' ) {
        return 'Integer_';
      }
      if (name == 'Long' || name == 'long') {
        return 'Long_';
      }
      if (name == 'boolean' || name == 'Boolean') {
        return 'Boolean_';
      }
      if (name == 'float' || name == 'Float') {
        return 'Float_';
      }
      if (name == 'double' || name == 'Double') {
        return 'Double_';
      }
      if (name == 'char' || name == 'Character') {
        return 'Character_';
      }
    }
    if (kind == CLASS_API) {
      var s = type.raw.simpleName + '_';
      if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
        s += genConvParamTypeArgs(type.args);
      }
      return s;
    }
    if (kind == CLASS_DATA_OBJECT) {
      return type.simpleName + "_";
    }
    if (kind == CLASS_JSON_OBJECT) {
      return "JsonObject_";
    }
    if (kind == CLASS_JSON_ARRAY) {
      return "JsonArray_";
    }
    if (kind == CLASS_LIST || kind == CLASS_SET) {
      return type.raw.simpleName + '_' + genConvParamTypeArgs(type.args);
    }
    if (kind == CLASS_THROWABLE) {
      return "Throwable";
    }
    return 'Nothing';
  }

  def genConvParamTypeArgs(typeArgs) {
    StringBuilder s = new java.lang.StringBuilder();
    s.append('<');
    var sep = '';
    for (typeArg : typeArgs) {
      s.append(sep).append(genConvParamType(typeArg));
      sep = ',';
    }
    s.append('>');
    return s.toString();
  }

  /*
   * Returns the Ruby expression that converts a Java object to a Ruby object.
   * @param type the type of the Java object
   * @param expr the expression that evaluates to the Java object
   */
  def genConvReturn(type, expr) {
    if (type.name.equals("void")) {
    } else {
      var kind = type.kind;
      if (kind.basic || kind == CLASS_THROWABLE) {
      } else if (kind == CLASS_DATA_OBJECT) {
      } else if (kind == CLASS_LIST) {
      } else if (kind == CLASS_SET) {
      } else if (kind == CLASS_MAP) {
        var valueType = type.args[1];
        var valueKind = valueType.kind;
        if (valueKind == CLASS_JSON_OBJECT) {
        } else if (valueKind == CLASS_JSON_ARRAY) {
        } else if (valueKind.basic) {
        }
      } else if (kind == CLASS_API) {
      } else if (kind.json) {
      } else if (kind == CLASS_OBJECT) {
      } else if (kind == CLASS_ENUM) {
      }
    }
    return expr;
  }
}

@comment{"Generate the imports"}
@includeNamed{'ceylon-imports.templ'}

@declare{'initializer'}
    # @private\n
    # @param j_del [@{genRubyClassFqn(type.raw)}] the java delegate\n
    def initialize(j_del)\n
	@if{callSuper}
      super(j_del)\n
	@end{}
      @j_del = j_del\n
    end\n
    # @private\n
    # @return [@{genRubyClassFqn(type.raw)}] the underlying java delegate\n
    def j_del\n
      @j_del\n
    end\n
@end{}

@declare{'genModelDecl'}
	@{type.raw.simpleName}@{typeSuffix}
	@if{typeParams.size() > 0}
		<@foreach{typeParam:typeParams}
		@{typeParam.name}
		@end{','}>
	@end{}
@end{}

@declare{'genExtendsClause'}
	@if{concreteSuperTypes.size() > 0}extends @{genTypeDecl(concreteSuperTypes[0])}(delegate) @end{}
@end{}

@code{
  def genSatisfiesClause() {
    var s = new java.lang.StringBuilder();
    var sep = 'satisfies ';
    for(superType : abstractSuperTypes) {
      s.append(sep).append(genTypeDecl(superType));
      sep = '& ';
    }
    return s.toString();
  }
}

@code{
  def genDelegateType(type) {
    StringBuilder s = new java.lang.StringBuilder();
    s.append(type.raw.simpleName).append('_');
    if (type.raw.params.size() > 0) {
      s.append('<');
      var sep = '';
      for (typeParam : type.raw.params) {
        s.append(sep).append('Object');
        sep = ',';
      }
      s.append('>');
    }
    return s.toString();
  }
}

@declare{'genMethodParams'}
[@foreach{param:method.params}@{genTypeDecl(param.type)}@end{','}]
@end{}

@declare{'genMethodArgs'}
@foreach{method:methods}@includeNamed{'genMethodParams'}@end{'|'}
@end{}

@code{
  def genMethodCall(method, indent) {
    var sb = new java.lang.StringBuilder();
    var args = new java.util.ArrayList();
    var idx = 0;
    for (param : method.params) {
      if (param.type.kind == CLASS_API) {
        sb.append(indent).append('assert(is Delegating<').append(genConvParamType(param.type)).append('> arg_').append(idx).append(' = args[').append(idx).append(']);\n');
        args.add('arg_' + idx + '.delegate');
      } else {
        sb.append(indent).append(genConvParam(param.type, 'arg_' + idx, 'args[' + idx + ']')).append(';\n');
        args.add('arg_' + idx);
      }
      idx += 1;
    }
    sb.append(indent);
    if (isGetterMethod(method)) {
      sb.append('Anything v = delegate.').append(toCeylonIdentifier(getPropertyNameFromGetter(method)));
    } else if (isSetterMethod(method)) {
      sb.append('delegate.').append(toCeylonIdentifier(getPropertyNameFromSetter(method))).append(' = ').append(args[0]);
    } else {
      sb.append('Anything v = delegate.').append(genMethodName(method)).append('(');
      var paramIdx = 0;
      for (param : method.params) {
        if (paramIdx > 0) {
          sb.append(',');
        }
        sb.append(args[paramIdx]);
        paramIdx += 1;
      }
      sb.append(')');
    }
    sb.append(';\n');
    return sb.toString();
  }
}

/* Generated from @{type.name} */\n
shared interface @includeNamed{'genModelDecl';typeSuffix=''} @{genSatisfiesClause()} {\n
\n

	@comment{'Generate formal interface methods'}
	@foreach{methods:methodsByName.values()}
		@code{lastMethod=methods[methods.size()-1]}
		@code{methodName=genMethodName(methods[0])}
		@if{!lastMethod.staticMethod && shouldDeclareMethod(methods)}
			  shared @if{isActualMethod(methods)}actual @end{}formal @{genTypeDecl(lastMethod.returnType)}(*<@includeNamed{'genMethodArgs'}>) @{methodName};\n
		@end{}
	@end{}

}\n

/* Generated from @{type.name} */\n
@if{concrete}
\n
shared abstract class @includeNamed{'genModelDecl';typeSuffix='_Impl'}(@{genDelegateType(type)} delegate) satisfies @includeNamed{'genModelDecl';typeSuffix=''} & Delegating<@{genDelegateType(type)}> {\n
\n

	@comment{'Generate instance methods'}
	@foreach{methods:methodsByName.values()}
		@code{lastMethod=methods[methods.size()-1]}
		@code{methodName=genMethodName(methods[0])}
		@if{!lastMethod.staticMethod && shouldDeclareMethod(methods)}
			  shared actual @{genTypeDecl(lastMethod.returnType)}(*<@includeNamed{'genMethodArgs'}>) @{methodName} => flatten(@{methodName}_impl);\n
		@end{}
	@end{}

	\n
	@comment{'Generate instance methods implementations'}
	@foreach{methods:methodsByName.values()}
		@code{lastMethod=methods[methods.size()-1]}
		@code{methodName=genMethodName(methods[0])}
		@if{!lastMethod.staticMethod && shouldDeclareMethod(methods)}
			  @{genTypeDecl(lastMethod.returnType)} @{methodName}_impl(@includeNamed{'genMethodArgs'} args) {\n
					@if{methods.size() == 1}
						@{genMethodCall(lastMethod,'    ')}
					@else{}
						@foreach{method:methods}
				    if (is @includeNamed{'genMethodParams'} args) {\n
							@{genMethodCall(method,'      ')}
				    }\n
						@end{}
					@end{}
				    Object test = this; // Just test we can access this\n
				    throw Exception("implement me");\n
				  }\n
			\n
		@end{}
	@end{}

}\n

@end{}

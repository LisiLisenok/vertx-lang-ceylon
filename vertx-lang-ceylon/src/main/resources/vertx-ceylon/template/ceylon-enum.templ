@includeNamed{'ceylon-common.templ'}

@code{
  def asValidMember(name) {
    if (Character.isLowerCase(name.charAt(0))) {
      return name;
    } else {
      return '\\i' + name;
    }
  }
}

import io.vertx.lang.ceylon { Converter }\n
import @{type.packageName} { @{type.simpleName}_=@{type.simpleName} }\n

\n
shared abstract class @{type.simpleName}(shared String name) of @foreach{value:values}@{asValidMember(value.identifier)}@end{' | '} {\n
}\n

\n
@foreach{value : values}
shared object @{asValidMember(value.identifier)} extends @{type.simpleName}("@{value.identifier}") {}\n
@end{}

\n
shared object @{CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName)} {\n

\n
  shared String toString(@{type.simpleName} val) {\n
      switch (val)
@foreach{value:values}
\n
      case(@{asValidMember(value.identifier)}) { return "@{value.identifier}"; }
@end{}
\n
  }\n

\n
  shared @{type.simpleName} fromString(String val) {\n
      switch (val)
@foreach{value:values}
\n
      case("@{value.identifier}") { return @{asValidMember(value.identifier)}; }
@end{}
\n
      else {\n
        throw Exception("Invalid @{type.simpleName} value ``val``");\n
      }\n
  }\n

\n
  shared object toJava extends Converter<@{type.simpleName}, @{type.simpleName}_>() {\n
    shared actual @{type.simpleName}_ convert(@{type.simpleName} src) {\n
      switch (src)
@foreach{value:values}
\n
      case(@{asValidMember(value.identifier)}) { return @{type.simpleName}_.@{asValidMember(value.identifier)}; }
@end{}
\n
    }\n
  }\n

\n
  shared object toCeylon extends Converter<@{type.simpleName}_, @{type.simpleName}>() {\n
    shared actual @{type.simpleName} convert(@{type.simpleName}_ src) {\n
@foreach{value:values}
      if (src == @{type.simpleName}_.@{asValidMember(value.identifier)}) {\n
        return @{asValidMember(value.identifier)};\n
      }\n
@end{}
      throw Exception("Invalid enum value");\n
    }\n
  }\n

}\n

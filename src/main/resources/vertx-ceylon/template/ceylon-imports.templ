@code{
  def generateImports(importedTypes) {

    /* Map<PackageName, Map<ClassName, ClassAlias>> */
    var packageImports = new java.util.HashMap();

    def addClassImport(packageName, className, classAlias) {
      var packageImport = packageImports.get(packageName);
      if (packageImport == null) {
        packageImport = new java.util.LinkedHashMap();
        packageImports.put(packageName, packageImport);
      }
      packageImport.put(className, classAlias);
    }

    addClassImport(type.raw.packageName, type.raw.simpleName, type.raw.simpleName + "_");
    addClassImport("io.vertx.lang.ceylon", "Delegating", "Delegating");

    foreach (importedType : importedTypes) {
      var importedKind = importedType.kind;
      if (importedType != type.raw) {
        if (importedKind == CLASS_API || importedKind == CLASS_DATA_OBJECT) {
          addClassImport(
            importedType.module.translateQualifiedName(importedType.packageName, 'ceylon'),
            importedType.simpleName,
            importedType.simpleName
          );
        } else if (importedKind == CLASS_JSON_OBJECT) {
          addClassImport("ceylon.json", "Object", "JsonObject");
          /* addClassImport("io.vertx.core.json", "JsonObject", "JsonObject_"); */
        } else if (importedKind == CLASS_JSON_ARRAY) {
          addClassImport("ceylon.json", "Array", "JsonArray");
          /* addClassImport("io.vertx.core.json", "JsonArray", "JsonArray_"); */
        } else if (importedKind == CLASS_BOXED_PRIMITIVE) {
          addClassImport("java.lang", importedType.simpleName, importedType.simpleName + "_");
        } else if (importedKind == CLASS_STRING) {
          addClassImport("java.lang", "String", "String_");
        }
      }
    }
    return packageImports;
  }
  var packageImports = generateImports(importedTypes);
}
@foreach{packageImport : packageImports.entrySet()}
import @{packageImport.key} {\n
@foreach{classImport: packageImport.value.entrySet()}
@if{classImport.key == classImport.value}
  @{classImport.key}
@else{}
  @{classImport.value}=@{classImport.key}
@end{}
@end{",\n"}\n
}\n
@end{}
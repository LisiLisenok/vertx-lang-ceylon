@includeNamed{'/vertx-java/template/common-lib.templ'}
@includeNamed{'ceylon-common.templ'}

@declare{'genClassMembers'}
	@foreach{method:instanceMethods}
		@if{method.cacheReturn}
			@code{cachedType=genJavaInterropTypeDecl(method.returnType)}
			@if{method.returnType.kind == CLASS_PRIMITIVE}
				@if{method.returnType.name == 'boolean'}
					@code{cachedType='java.lang.Boolean'}
				@else{method.returnType.name == 'byte'}
					@code{cachedType='java.lang.Byte'}
				@else{method.returnType.name == 'short' || method.returnType.name == 'int' || method.returnType.name == 'long'}
					@code{cachedType='java.lang.Long'}
				@else{method.returnType.name == 'float' || method.returnType.name == 'double'}
					@code{cachedType='java.lang.Double'}
				@else{method.returnType.name == 'char'}
					@code{cachedType='java.lang.Character'}
				@end{}
			@end{}
@{indent}@Ignore private @{cachedType} cached_@{method.name};\n
		@end{}
	@end{}
@{indent}@Ignore private final @{type.raw.name} delegate;\n
\n
@{indent}public @{ctor}(@{type.raw.name} delegate) {\n
@if{concreteSuperType != null}
@{indent}  super(delegate);\n
@end{}
@{indent}  this.delegate = delegate;\n
@{indent}}\n
\n
@{indent}@Ignore\n
@{indent}public Object getDelegate() {\n
@{indent}  return delegate;\n
@{indent}}\n

@foreach{method:instanceMethods}\n
@includeNamed{'genMethodDecl'} {\n
@includeNamed{'genMethodBody'}
@{indent}}\n
@end{}

@end{}

@comment{"Generate the imports"}
package @{type.raw.translatePackageName('ceylon')};\n

\n
@includeNamed{'genImports'}

\n
@if{typeParams.size() > 0}
@includeNamed{'genTypeParamsDesc';params=typeParams;indent=''}
@end{}
@DocAnnotation$annotation$(description = "todo")\n
public @if{concrete}class@else{}interface@end{} @{type.raw.simpleName}@includeNamed{'genTypeParams';params=typeParams}
@if{concreteSuperType != null} extends @{concreteSuperType.translateName('ceylon')}@end{}
@if{abstractSuperTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{abstractSuperType:abstractSuperTypes}
	 @{genJavaInterropTypeDecl(abstractSuperType)}
	@end{','}
@end{} {\n

\n
  @if{concrete}public static final @end{}TypeDescriptor $TypeDescriptor$ = TypeDescriptor.klass(@{type.raw.simpleName}.class);\n

\n
  @if{concrete}public static final @end{}io.vertx.lang.ceylon.Converter<@{type.raw.name}, @{type.raw.simpleName}> TO_CEYLON = new io.vertx.lang.ceylon.Converter<@{type.raw.name}, @{type.raw.simpleName}>() {\n
    public @{type.raw.simpleName} convert(@{type.raw.name} src) {\n
      return new @{type.raw.simpleName}@if{!concrete}.Impl@end{}(src);\n
    }\n
  };\n

\n
  @if{concrete}public static final @end{}io.vertx.lang.ceylon.Converter<@{type.raw.simpleName}, @{type.raw.name}> TO_JAVA = new io.vertx.lang.ceylon.Converter<@{type.raw.simpleName}, @{type.raw.name}>() {\n
    public @{type.raw.name} convert(@{type.raw.simpleName} src) {\n
@if{concrete}
      return src.delegate;\n
@else{}
      return (@{type.raw.name})src.getDelegate();\n
@end{}
    }\n
  };\n

\n

@if{concrete}

	@includeNamed{'genClassMembers';indent='  ';ctor=type.raw.simpleName}

@else{}

	  @Ignore\n
	  Object getDelegate();\n

	@foreach{method:instanceMethods}
		\n
		@includeNamed{'genMethodDecl'};\n
	@end{}

	\n  @Ignore\n
	  public class Impl@includeNamed{'genTypeParams';params=typeParams} implements @{type.raw.simpleName}@includeNamed{'genTypeParams';params=typeParams} {\n
	@includeNamed{'genClassMembers';indent='    ';ctor='Impl'}
	  }\n

@end{}

\n
}\n

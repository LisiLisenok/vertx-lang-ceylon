@code{
  def toCeylonIdentifier(s) {
    if (s == 'value') {
      return '\\ivalue';
    } else if (s == 'exists') {
       return '\\iexists';
    } else {
      return s;
    }
  }
}

@code{
  def genTypeDecl(type) {
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = type.simpleName;
      if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
        decl = genTypeDecl(type.raw);
        var sep = '<';
        for (typeArg : type.args) {
          decl += sep + genTypeDecl(typeArg);
          sep = ',';
        }
        decl += '>';
      }
    } else if (kind == CLASS_STRING || kind == CLASS_ENUM) {
      decl = 'String';
    } else if (kind == CLASS_BOXED_PRIMITIVE) {
      var name = type.name;
      if (name == 'java.lang.Long' || name == 'java.lang.Integer' || name == 'java.lang.Short') {
        decl = 'Integer';
      } else if (name == 'java.lang.Float' || name == 'java.lang.Double') {
        decl = 'Float';
      } else if (name == 'java.lang.Boolean') {
        decl = 'Boolean';
      } else if (name == 'java.lang.Character') {
        decl = 'Character';
      } else if (name == 'java.lang.Byte') {
        decl = 'Byte';
      }
    } else if (kind == CLASS_PRIMITIVE) {
      var name = type.name;
      if (name == 'long' || name == 'int' || name == 'short') {
        decl = 'Integer';
      } else if (name == 'float' || name == 'double') {
        decl = 'Float';
      } else if (name == 'boolean') {
        decl = 'Boolean';
      } else if (name == 'char') {
        decl = 'Character';
      } else if (name == 'byte') {
        decl = 'Byte';
      }
    } else if (kind == CLASS_OBJECT) {
      /* handle this instanceof better */
      if (type instanceof io.vertx.codegen.TypeInfo$Variable) {
        if (type.param instanceof io.vertx.codegen.TypeParamInfo$Class) {
          decl = type.name;
        } else {
          decl = 'Object';
        }
      } else {
        decl = 'Object';
      }
    } else if (kind == CLASS_HANDLER) {
      var arg = type.args[0];
      if (arg.kind == CLASS_VOID) {
        decl = 'Anything()';
      } else if (arg.kind == CLASS_ASYNC_RESULT) {
        var result = arg.args[0];
        if (result.kind == CLASS_VOID) {
          decl = 'Anything(Throwable?)';
        } else {
          decl = 'Anything(Throwable|' + genTypeDecl(result) + ')';
        }
      } else {
        decl = 'Anything(' + genTypeDecl(type.args[0]) + ')';
      }
    } else if (kind == CLASS_THROWABLE) {
      decl = 'Throwable';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = type.simpleName;
    } else if (kind == CLASS_LIST) {
      decl = 'List<' + genTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_VOID) {
      decl = 'Anything';
    } else if (kind == CLASS_SET) {
      decl = 'Set<' + genTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_LIST) {
      decl = 'List<' + genTypeDecl(type.args[0])) + '>';
    } else if (kind == CLASS_MAP) {
      decl = 'Map<' + genTypeDecl(type.args[0]) + ',' + genTypeDecl(type.args[1]) + '>';
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = 'JsonObject';
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = 'JsonArray';
    } else if (kind == CLASS_OTHER) {
      if (type instanceof io.vertx.codegen.TypeInfo$Void) {
        decl = 'Anything';
      }
    }
    return decl;
  }

  def shouldDeclareMethod(methods) {
    for (method : methods) {
      if (method.ownerTypes.size() > 1 || method.isOwnedBy(type.raw)) {
        return true;
      }
    }
    return false;
  }

  def isActualMethod(methods) {
    for (method : methods) {
      if (method.ownerTypes.size() > 1) {
        return true;
      }
    }
    return false;
  }

  def isGetterMethod(method) {
    if (method.params.isEmpty() && method.returnType.name != 'void') {
      var name = method.name;
      if (name.length() > 2 && name.startsWith('is') && Character.isUpperCase(name.charAt(2))) {
        return true;
      }
      if (name.length() > 3 && name.startsWith('get') && Character.isUpperCase(name.charAt(3))) {
        return true;
      }
    }
    return false;
  }

  def isSetterMethod(method) {
    var name = method.name;
    if (method.returnType.name == 'void' && method.params.size() == 1 && name.length() > 3 && name.startsWith('set') && Character.isUpperCase(name.charAt(3))) {
      for (other : methods) {
        if (isGetterMethod(other) && getPropertyNameFromGetter(other) == getPropertyNameFromSetter(method)) {
          return true;
        }
      }
    }
    return false;
  }

  def getPropertyNameFromGetter(method) {
    var name = method.name;
    if (name.length() > 2 && name.startsWith('is')) {
      return java.beans.Introspector.decapitalize(name.substring(2));
    }
    if (name.length() > 3 && name.startsWith('get')) {
      return java.beans.Introspector.decapitalize(name.substring(3));
    }
    return null;
  }

  def getPropertyNameFromSetter(method) {
    return java.beans.Introspector.decapitalize(method.name.substring(3));
  }
}

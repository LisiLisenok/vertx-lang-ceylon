@includeNamed{'/vertx-java/template/common-lib.templ'}
@includeNamed{'ceylon-common.templ'}
@code{

  /*
   * Generate a Ceylon method name for a given method.
   */
  def genMethodName(method) {
    return toCeylonIdentifier(method.name);
  }

  def genConvParam(type, expr) {
    var kind = type.kind;
    if (kind.basic) {
      var sname = type.simpleName;
      if (kind == CLASS_PRIMITIVE) {
        if (sname == 'int' || sname == 'short' || sname == 'float' || sname == 'char') {
          return '(' + sname + ')' + expr;
        }
        return expr;
      } else {
       return 'io.vertx.lang.ceylon.ToJava.' + type.simpleName + '.safeConvert(' + expr + ')';
      }
    } else if (kind.json) {
       return 'io.vertx.lang.ceylon.ToJava.' + type.simpleName + '.convert(' + expr + ')';
    } else if (kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      if (eventKind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        var resultKind = resultType.kind;
        var adapterType = resultType.erased;
        return expr + ' == null ? null : new io.vertx.lang.ceylon.AsyncResultAdapter<' + adapterType.name + '>(' + expr + ') {\n' +
        '      public Object toCeylon(' + adapterType.name + ' event) {\n' +
        '        return ' + genConvReturn(adapterType, 'event') + ';\n' +
        '      }\n' +
        '    }';
      } else if (eventKind == CLASS_VOID) {
        /* Special case */
        return expr + ' == null ? null : new ' + type.erased.name + '() {\n' +
        '      public void handle(' + type.erased.args[0].name + ' event) {\n' +
        '        ' + expr + '.$call$();\n' +
        '      }\n' +
        '    }';
      } else {
        return expr + ' == null ? null : new ' + type.erased.name + '() {\n' +
        '      public void handle(' + type.erased.args[0].name + ' event) {\n' +
        '        ' + expr + '.$call$((Object)' + genConvReturn(type.erased.args[0], 'event') + ');\n' +
        '      }\n' +
        '    }';
      }
    } else if (kind == CLASS_API) {
      return type.raw.translateName('ceylon') + '.TO_JAVA.convert(' + expr + ')';
    } else if (kind == CLASS_OBJECT) {
      return 'io.vertx.lang.ceylon.ToJava.object(' + expr + ')';
    } else if (kind == CLASS_DATA_OBJECT) {
      return expr + ' == null ? null : new ' + type.name + '(io.vertx.lang.ceylon.ToJava.JsonObject.convert(' + expr + '.toJson()))';
    } else if (kind == CLASS_JSON_OBJECT) {
    } else if (kind == CLASS_JSON_ARRAY) {
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        return genParamConverter(type) + '.convert(' + expr + ')';
      } else {
        return type.name + '.valueOf(' + expr + '.toString())';
      }
    } else if (kind == CLASS_LIST || kind == CLASS_SET) {
      var collection = kind == CLASS_LIST ? 'io.vertx.lang.ceylon.ToJava.list' : 'io.vertx.lang.ceylon.ToJava.set';
      var eltConverter = genParamConverter(type.args[0]);
      if (eltConverter != null) {
        return collection + '(' + expr + ', ' + eltConverter + ')';
      }
    } else if (kind == CLASS_MAP) {
      var valConverter = genParamConverter(type.args[1]);
      if (valConverter != null) {
        return 'io.vertx.lang.ceylon.ToJava.map' + '(' + expr + ', io.vertx.lang.ceylon.ToJava.String, ' + valConverter + ')';
      }
    }
    return 'null';
  }

  def genParamConverter(type) {
    var kind = type.kind;
    if (kind.basic || kind.json) {
      return 'io.vertx.lang.ceylon.ToJava.' + type.simpleName;
    } else if (kind == CLASS_API) {
      return type.translateName('ceylon') + '.TO_JAVA';
    } else if (kind == CLASS_DATA_OBJECT) {
      return type.translatePackageName('ceylon') + '.toJava' + type.simpleName + '_.get_()';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        return type.translatePackageName('ceylon') + '.toJava' + type.simpleName + '_.get_()';
      } else {
        return 'io.vertx.lang.ceylon.ToJava.enumeration(' + type.name + '.class)';
      }
    }
    return null;
  }

  def genConvParamType(type) {
    var kind = type.kind;
    if (kind == CLASS_OBJECT) {
      return 'Object';
    }
    if (kind == CLASS_VOID) {
      return "Void_";
    }
    if (kind == CLASS_STRING) {
      return "String_";
    }
    if (kind.basic) {
      var name = type.simpleName;
      if (name == 'byte' || name == 'Byte') {
        return 'Byte_';
      }
      if (name == 'short' || name == 'Short') {
        return 'Short_';
      }
      if (name == 'Integer' || name == 'int' ) {
        return 'Integer_';
      }
      if (name == 'Long' || name == 'long') {
        return 'Long_';
      }
      if (name == 'boolean' || name == 'Boolean') {
        return 'Boolean_';
      }
      if (name == 'float' || name == 'Float') {
        return 'Float_';
      }
      if (name == 'double' || name == 'Double') {
        return 'Double_';
      }
      if (name == 'char' || name == 'Character') {
        return 'Character_';
      }
    }
    if (kind == CLASS_API) {
      var s = type.raw.simpleName + '_';
      if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
        s += genConvParamTypeArgs(type.args);
      }
      return s;
    }
    if (kind == CLASS_DATA_OBJECT) {
      return type.simpleName + "_";
    }
    if (kind == CLASS_JSON_OBJECT) {
      return "JsonObject_";
    }
    if (kind == CLASS_JSON_ARRAY) {
      return "JsonArray_";
    }
    if (kind == CLASS_LIST || kind == CLASS_SET) {
      return type.raw.simpleName + '_' + genConvParamTypeArgs(type.args);
    }
    if (kind == CLASS_THROWABLE) {
      return "Throwable";
    }
    return 'Nothing';
  }

  def genConvParamTypeArgs(typeArgs) {
    StringBuilder s = new java.lang.StringBuilder();
    s.append('<');
    var sep = '';
    for (typeArg : typeArgs) {
      s.append(sep).append(genConvParamType(typeArg));
      sep = ',';
    }
    s.append('>');
    return s.toString();
  }

  /*
   * Returns the Ceylon expression that converts a Java object to a Ceylon object.
   * @param type the type of the Java object
   * @param expr the expression that evaluates to the Java object
   */
  def genConvReturn(type, expr) {
    if (type.name.equals("void")) {
      return expr;
    } else {
      var kind = type.kind;
      if (kind.basic || kind == CLASS_THROWABLE || kind.json) {
        if (kind == CLASS_BOXED_PRIMITIVE || kind == CLASS_STRING || kind.json) {
          return 'io.vertx.lang.ceylon.ToCeylon.' + type.simpleName + '.safeConvert(' + expr + ')';
        }
        return expr;
      } else if (kind == CLASS_DATA_OBJECT) {
        return type.translatePackageName('ceylon') + '.toCeylon' + type.simpleName + '_.get_().safeConvert(' + expr + ')';
      } else if (kind == CLASS_LIST || kind == CLASS_SET) {
        var collection = kind == CLASS_LIST ? 'io.vertx.lang.ceylon.ToCeylon.list' : 'io.vertx.lang.ceylon.ToCeylon.set';
        var typeArg = type.args[0];
        if (typeArg.kind.basic || typeArg.kind.json) {
          return collection + '(' + genCeylonTypeDecl(typeArg, false).replace('::', '.') + '.$TypeDescriptor$, ' + expr + ', io.vertx.lang.ceylon.ToCeylon.' + typeArg.simpleName + ')';
        } else if (typeArg.kind == CLASS_DATA_OBJECT) {
          return collection + '(' + genCeylonTypeDecl(typeArg, false).replace('::', '.') + '.$TypeDescriptor$, ' + expr + ', ' + typeArg.translatePackageName('ceylon') + '.toCeylon' + typeArg.simpleName + '_.get_())';
        } else if (typeArg.kind == CLASS_API) {
          return collection + '(' + typeArg.translateName('ceylon') + '.$TypeDescriptor$, ' + expr + ', ' + typeArg.translateName('ceylon') + '.TO_CEYLON)';
        }
      } else if (kind == CLASS_MAP) {
        var valArg =  type.args[1];
        return 'io.vertx.lang.ceylon.ToCeylon.map(' +
          'ceylon.language.String.$TypeDescriptor$, ' +
          genCeylonTypeDecl(valArg, false).replace('::', '.') + '.$TypeDescriptor$, ' +
          expr + ', ' +
          'io.vertx.lang.ceylon.ToCeylon.String, ' +
          'io.vertx.lang.ceylon.ToCeylon.' + valArg.simpleName + ')';
      } else if (kind == CLASS_API) {
        return type.raw.translateName('ceylon') + '.TO_CEYLON.safeConvert(' + expr + ')';
      } else if (kind.json) {
      } else if (kind == CLASS_OBJECT) {
        return 'io.vertx.lang.ceylon.ToCeylon.object(' + expr + ')';
      } else if (kind == CLASS_ENUM) {
        if (type.gen) {
          return type.translatePackageName('ceylon') + '.toCeylon' + type.simpleName + '_.get_().safeConvert(' + expr + ')';
        } else {
          return 'new ceylon.language.String(' + expr + '.name())';
        }
      }
    }
    return 'null';
  }

  /*
   * Generate Java type declaration for Ceylon interrop.
   */
  def genJavaInterropTypeDecl(type) {
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = type.simpleName;
      if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
        decl = genJavaInterropTypeDecl(type.raw);
        var sep = '<';
        for (typeArg : type.args) {
          decl += sep + genJavaInterropTypeDecl(typeArg);
          sep = ',';
        }
        decl += '>';
      }
    } else if (kind == CLASS_STRING) {
      decl = 'ceylon.language.String';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        decl = type.translateName('ceylon');
      } else {
        decl = 'ceylon.language.String';
      }
    } else if (kind == CLASS_BOXED_PRIMITIVE) {
      var name = type.name;
      if (name == 'java.lang.Long' || name == 'java.lang.Integer' || name == 'java.lang.Short') {
        decl = 'ceylon.language.Integer';
      } else if (name == 'java.lang.Float' || name == 'java.lang.Double') {
        decl = 'ceylon.language.Float';
      } else if (name == 'java.lang.Boolean') {
        decl = 'ceylon.language.Boolean';
      } else if (name == 'java.lang.Character') {
        decl = 'ceylon.language.Character';
      } else if (name == 'java.lang.Byte') {
        decl = 'ceylon.language.Byte';
      }
    } else if (kind == CLASS_PRIMITIVE) {
      var name = type.name;
      if (name == 'long' || name == 'int' || name == 'short') {
        decl = 'long';
      } else if (name == 'float' || name == 'double') {
        decl = 'double';
      } else if (name == 'boolean') {
        decl = 'boolean';
      } else if (name == 'char') {
        decl = 'int';
      } else if (name == 'byte') {
        decl = 'byte';
      }
    } else if (kind == CLASS_OBJECT) {
      /* handle this instanceof better */
      if (type instanceof io.vertx.codegen.TypeInfo$Variable) {
        decl = type.name;
      } else {
        decl = 'Object';
      }
    } else if (kind == CLASS_HANDLER) {
      var arg = type.args[0];
      decl = 'Callable<?>';
    } else if (kind == CLASS_THROWABLE) {
      decl = 'Throwable';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = type.translatePackageName('ceylon') + "." + type.simpleName;
    } else if (kind == CLASS_VOID) {
      decl = 'Anything';
    } else if (kind == CLASS_LIST) {
      decl = 'ceylon.language.List<' + genJavaInterropTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_SET) {
      decl = 'ceylon.language.Set<' + genJavaInterropTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_MAP) {
      decl = 'ceylon.language.Map<' + genJavaInterropTypeDecl(type.args[0]) + ',' + genJavaInterropTypeDecl(type.args[1]) + '>';
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = 'ceylon.json.Object';
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = 'ceylon.json.Array';
    } else if (kind == CLASS_OTHER) {
      if (type instanceof io.vertx.codegen.TypeInfo$Void) {
        decl = 'void';
      }
    }
    return decl;
  }

  /*
   * Generate Ceylon type declaration.
   */
  def genCeylonTypeDecl(type, wantNullable) {
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = type.raw.translatePackageName('ceylon') + "::" + type.simpleName;
      if (type instanceof io.vertx.codegen.TypeInfo$Parameterized) {
        decl = genCeylonTypeDecl(type.raw, wantNullable);
        var sep = '<';
        for (typeArg : type.args) {
          decl += sep + genCeylonTypeDecl(typeArg, wantNullable);
          sep = ',';
        }
        decl += '>';
      }
    } else if (kind == CLASS_STRING) {
      decl = 'ceylon.language::String';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        decl = type.translatePackageName('ceylon') + "::" + type.simpleName;
      } else {
        decl = 'ceylon.language::String';
      }
    } else if (kind == CLASS_BOXED_PRIMITIVE) {
      var name = type.name;
      if (name == 'java.lang.Long' || name == 'java.lang.Integer' || name == 'java.lang.Short') {
        decl = 'ceylon.language::Integer';
      } else if (name == 'java.lang.Float' || name == 'java.lang.Double') {
        decl = 'ceylon.language::Float';
      } else if (name == 'java.lang.Boolean') {
        decl = 'ceylon.language::Boolean';
      } else if (name == 'java.lang.Character') {
        decl = 'ceylon.language::Character';
      } else if (name == 'java.lang.Byte') {
        decl = 'ceylon.language::Byte';
      }
    } else if (kind == CLASS_PRIMITIVE) {
      var name = type.name;
      if (name == 'long' || name == 'int' || name == 'short') {
        decl = 'ceylon.language::Integer';
      } else if (name == 'float' || name == 'double') {
        decl = 'ceylon.language::Float';
      } else if (name == 'boolean') {
        decl = 'ceylon.language::Boolean';
      } else if (name == 'char') {
        decl = 'ceylon.language::Character';
      } else if (name == 'byte') {
        decl = 'ceylon.language::Byte';
      }
    } else if (kind == CLASS_OBJECT) {
      /* handle this instanceof better */
      if (type instanceof io.vertx.codegen.TypeInfo$Variable) {
        decl = type.name;
      } else {
        decl = 'ceylon.language::Object';
      }
    } else if (kind == CLASS_HANDLER) {
      var arg = type.args[0];
      if (arg.kind == CLASS_VOID) {
        decl = 'ceylon.language::Anything()';
      } else if (arg.kind == CLASS_ASYNC_RESULT) {
        var result = arg.args[0];
        if (result.kind == CLASS_VOID) {
          decl = 'ceylon.language::Anything(ceylon.language::Throwable?)';
        } else {
          decl = 'ceylon.language::Anything(ceylon.language::Throwable|' + genCeylonTypeDecl(result, wantNullable) + ')';
        }
      } else {
        decl = 'ceylon.language::Anything(' + genCeylonTypeDecl(type.args[0], wantNullable) + ')';
      }
    } else if (kind == CLASS_THROWABLE) {
      decl = 'ceylon.language::Throwable';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = type.translatePackageName('ceylon') + "::" + type.simpleName;
    } else if (kind == CLASS_VOID) {
      decl = 'ceylon.language::Anything';
    } else if (kind == CLASS_SET) {
      decl = 'ceylon.language::Set<' + genCeylonTypeDecl(type.args[0], wantNullable) + '>';
    } else if (kind == CLASS_LIST) {
      decl = 'ceylon.language::List<' + genCeylonTypeDecl(type.args[0], wantNullable) + '>';
    } else if (kind == CLASS_MAP) {
      decl = 'ceylon.language::Map<' + genCeylonTypeDecl(type.args[0], wantNullable) + ',' + genCeylonTypeDecl(type.args[1], wantNullable) + '>';
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = 'ceylon.json::Object';
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = 'ceylon.json::Array';
    } else if (kind == CLASS_OTHER) {
      if (type instanceof io.vertx.codegen.TypeInfo$Void) {
        decl = 'ceylon.language::Anything';
      }
    }
    if (type.nullable) {
      System.out.println("NULLABLE " + type);
    }
    if (wantNullable && type.nullable) {
      decl += "?";
    }
    return decl;
  }
}

@declare{'initializer'}
    # @private\n
    # @param j_del [@{genRubyClassFqn(type.raw)}] the java delegate\n
    def initialize(j_del)\n
	@if{callSuper}
      super(j_del)\n
	@end{}
      @j_del = j_del\n
    end\n
    # @private\n
    # @return [@{genRubyClassFqn(type.raw)}] the underlying java delegate\n
    def j_del\n
      @j_del\n
    end\n
@end{}

@declare{'genTypeParams'}
	@if{params.size() > 0}
		<@foreach{param:params}
		@{param.name}
		@end{','}>
	@end{}
@end{}

@declare{'genExtendsClause'}
	@if{concreteSuperType != null}extends @{genTypeDecl(concreteSuperType)}(delegate) @end{}
@end{}

@code{
  def genSatisfiesClause() {
    var s = new java.lang.StringBuilder();
    var sep = 'satisfies ';
    for(superType : abstractSuperTypes) {
      s.append(sep).append(genTypeDecl(superType));
      sep = '& ';
    }
    return s.toString();
  }
}

@code{
  def genDelegateType(type) {
    StringBuilder s = new java.lang.StringBuilder();
    s.append(type.raw.simpleName).append('_');
    if (type.raw.params.size() > 0) {
      s.append('<');
      var sep = '';
      for (typeParam : type.raw.params) {
        s.append(sep).append('Object');
        sep = ',';
      }
      s.append('>');
    }
    return s.toString();
  }
}

@declare{'genMethodParams'}
[@foreach{param:method.params}@{genTypeDecl(param.type)}@end{','}]
@end{}

@declare{'genMethodArgs'}
@foreach{method:methods}@includeNamed{'genMethodParams'}@end{'|'}
@end{}

@code{
  def genMethodCallCeylon(method, indent) {
    var sb = new java.lang.StringBuilder();
    var args = new java.util.ArrayList();
    var idx = 0;
    for (param : method.params) {
      if (param.type.kind == CLASS_API) {
        sb.append(indent).append('assert(is Delegating<').append(genConvParamType(param.type)).append('> arg_').append(idx).append(' = args[').append(idx).append(']);\n');
        args.add('arg_' + idx + '.delegate');
      } else {
        sb.append(indent).append(genConvParam(param.type, 'arg_' + idx, 'args[' + idx + ']')).append(';\n');
        args.add('arg_' + idx);
      }
      idx += 1;
    }
    sb.append(indent);
    if (isGetterMethod(method)) {
      sb.append('Anything v = delegate.').append(toCeylonIdentifier(getPropertyNameFromGetter(method)));
    } else if (isSetterMethod(method)) {
      sb.append('delegate.').append(toCeylonIdentifier(getPropertyNameFromSetter(method))).append(' = ').append(args[0]);
    } else {
      sb.append('Anything v = delegate.').append(genMethodName(method)).append('(');
      var paramIdx = 0;
      for (param : method.params) {
        if (paramIdx > 0) {
          sb.append(',');
        }
        sb.append(args[paramIdx]);
        paramIdx += 1;
      }
      sb.append(')');
    }
    sb.append(';\n');
    return sb.toString();
  }
}

@code{
  def genMethodCall(method, indent) {
    var sb = new java.lang.StringBuilder();
    var args = new java.util.ArrayList();
    var idx = 0;
    for (param : method.params) {
      var arg = 'arg_' + idx;
      sb.append(indent);
      sb.append(param.type.erased);
      sb.append(' ');
      sb.append(arg);
      sb.append(' = ');
      sb.append(genConvParam(param.type, param.name));
      sb.append(';\n');
      idx += 1;
    }
    var expr = new java.lang.StringBuilder();
    if (method.staticMethod) {
      expr.append(type.raw.name);
    } else {
      expr.append('delegate');
    }
    expr.append('.').append(method.name).append('(');
    var paramIdx = 0;
    for (param : method.params) {
      if (paramIdx > 0) {
        expr.append(', ');
      }
      expr.append('arg_' + paramIdx);
      paramIdx += 1;
    }
    expr.append(')');
    sb.append(indent);
    if (method.returnType.name != 'void') {
      sb.append(genJavaInterropTypeDecl(method.returnType)).append(' ret = ');
    }
    sb.append(genConvReturn(method.returnType, expr.toString()));
    sb.append(';\n');
    return sb.toString();
  }
}

@declare{'genTypeParamsDesc'}
@{indent}@TypeParameters({\n
	@foreach{param:params}
@{indent}  @TypeParameter(value="@{param.name}",variance=Variance.NONE)
	@end{',\n'}
\n@{indent}})\n
@end{}

@declare{'genClassCtor'}
	@foreach{method:methods}
		@if{method.cacheReturn}
			@code{cachedType=genJavaInterropTypeDecl(method.returnType)}
			@if{method.returnType.kind == CLASS_PRIMITIVE}
				@if{method.returnType.name == 'boolean'}
					@code{cachedType='java.lang.Boolean'}
				@else{method.returnType.name == 'byte'}
					@code{cachedType='java.lang.Byte'}
				@else{method.returnType.name == 'short' || method.returnType.name == 'int' || method.returnType.name == 'long'}
					@code{cachedType='java.lang.Long'}
				@else{method.returnType.name == 'float' || method.returnType.name == 'double'}
					@code{cachedType='java.lang.Double'}
				@else{method.returnType.name == 'char'}
					@code{cachedType='java.lang.Character'}
				@end{}
			@end{}
@{indent}@Ignore private @{cachedType} cached_@{method.name};\n
		@end{}
	@end{}
@{indent}@Ignore private final @{type.raw.name} delegate;\n
\n
@{indent}public @{ctor}(@{type.raw.name} delegate) {\n
@if{concreteSuperType != null}
@{indent}  super(delegate);\n
@end{}
@{indent}  this.delegate = delegate;\n
@{indent}}\n
\n
@{indent}@Ignore\n
@{indent}public Object getDelegate() {\n
@{indent}  return delegate;\n
@{indent}}\n
@end{}

@declare{'genMethodBody'}
	@if{method.cacheReturn}
@{indent}if (cached_@{method.name} != null) {\n
@{indent}  return cached_@{method.name};\n
@{indent}}\n
	@end{}
	@{genMethodCall(method, '    ')}
	@if{method.returnType.name != 'void'}
		@if{method.fluent}
@{indent}return this;\n
		@else{}
			@if{method.cacheReturn}
@{indent} cached_@{method.name} = ret;\n
			@end{}
@{indent}return ret;\n
		@end{}
	@end{}
@end{}

@comment{"Generate the imports"}
package @{type.raw.translatePackageName('ceylon')};\n

\n
import com.redhat.ceylon.compiler.java.metadata.TypeInfo;\n
import com.redhat.ceylon.compiler.java.metadata.TypeParameter;\n
import com.redhat.ceylon.compiler.java.metadata.TypeParameters;\n
import com.redhat.ceylon.compiler.java.metadata.Variance;\n
import com.redhat.ceylon.compiler.java.metadata.Ignore;\n
import com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor;\n
import ceylon.language.Callable;\n
import ceylon.language.DocAnnotation$annotation$;\n
@foreach{importedType:importedTypes}

	@if{importedType.kind == CLASS_DATA_OBJECT}
	@else{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.raw.translateName("ceylon")};\n
		@end{}
	@else{importedType.kind == CLASS_ENUM && importedType.gen}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.raw.translateName("ceylon")};\n
			@foreach{value:importedType.values}
			import @{importedType.raw.translateName("ceylon")};\n
			@end{}
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
			import @{importedType};\n
		@end{}
	@end{}
@end{}

\n
@if{typeParams.size() > 0}
@includeNamed{'genTypeParamsDesc';params=typeParams;indent=''}
@end{}
@DocAnnotation$annotation$(description = "todo")\n
public @if{concrete}class@else{}interface@end{} @{type.raw.simpleName}@includeNamed{'genTypeParams';params=typeParams}
@if{concreteSuperType != null} extends @{concreteSuperType.translateName('ceylon')}@end{}
@if{abstractSuperTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{abstractSuperType:abstractSuperTypes}
	 @{genJavaInterropTypeDecl(abstractSuperType)}
	@end{','}
@end{} {\n

\n
  @if{concrete}public static final @end{}TypeDescriptor $TypeDescriptor$ = TypeDescriptor.klass(@{type.raw.simpleName}.class);\n

\n
  @if{concrete}public static final @end{}io.vertx.lang.ceylon.Converter<@{type.raw.name}, @{type.raw.simpleName}> TO_CEYLON = new io.vertx.lang.ceylon.Converter<@{type.raw.name}, @{type.raw.simpleName}>() {\n
    public @{type.raw.simpleName} convert(@{type.raw.name} src) {\n
      return new @{type.raw.simpleName}@if{!concrete}.Impl@end{}(src);\n
    }\n
  };\n

\n
  @if{concrete}public static final @end{}io.vertx.lang.ceylon.Converter<@{type.raw.simpleName}, @{type.raw.name}> TO_JAVA = new io.vertx.lang.ceylon.Converter<@{type.raw.simpleName}, @{type.raw.name}>() {\n
    public @{type.raw.name} convert(@{type.raw.simpleName} src) {\n
@if{concrete}
      return src.delegate;\n
@else{}
      return (@{type.raw.name})src.getDelegate();\n
@end{}
    }\n
  };\n


\n
@if{concrete}
	@includeNamed{'genClassCtor';indent='  ';ctor=type.raw.simpleName}
@else{}
  @Ignore\n
  Object getDelegate();\n
@end{}

@foreach{method:methods}
\n
@if{method.typeParams.size() > 0}
@includeNamed{'genTypeParamsDesc';params=method.typeParams;indent='  '}
@end{}
  @DocAnnotation$annotation$(description = "todo")\n
  @TypeInfo("@{genCeylonTypeDecl(method.returnType, true)}")\n
  @if{concrete}public @end{}
@if{method.staticMethod}static @end{}
@if{method.typeParams.size() > 0}@includeNamed{'genTypeParams';params=method.typeParams} @end{}
@{genJavaInterropTypeDecl(method.returnType)} @{method.name}(@foreach{param:method.params}
\n    final @TypeInfo("@{genCeylonTypeDecl(param.type, true)}") @DocAnnotation$annotation$(description = "todo") @{genJavaInterropTypeDecl(param.type)} @{param.name}@end{', '})
	@if{concrete} {\n
		@includeNamed{'genMethodBody';indent='    '}
  }\n
	@else{}
;\n
	@end{}
@end{}

@if{!concrete}
\n
  @Ignore\n
  public class Impl@includeNamed{'genTypeParams';params=typeParams} implements @{type.raw.simpleName}@includeNamed{'genTypeParams';params=typeParams} {\n

@includeNamed{'genClassCtor';indent='    ';ctor='Impl'}

@foreach{method:methods}
\n
    @Override\n
    public @{genJavaInterropTypeDecl(method.returnType)} @{method.name}(
@foreach{param:method.params}
final @{genJavaInterropTypeDecl(param.type)} @{param.name}@end{', '}) {\n
@includeNamed{'genMethodBody';indent='      '}
    }\n
@end{}

  }\n
@end{}


\n
}\n
